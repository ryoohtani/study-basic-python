version: '3.9'
services:

  # 開発環境用
  python3-dev:
    build:
      context: ./backend/pyfile
      target: development # 開発環境用
    container_name: "stady-python-dev"
    ports:
      - 8020:8020
    volumes: # ボリュームのマウント、ホストとコンテナのディレクトリをリアルタイムで同期
      - .:/src
      - /src/backend/pyfile/venv  # venvはホストPCにマウントしない 
      - /tmp/.X11-unix:/tmp/.X11-unix 
    tty: true
    environment:
      - ENV=development  # 開発モード変数
      - DISPLAY=host.docker.internal:0.0 #(tkinterを使う場合必要又はドッカーからホストに対して通信を行う場合)
      # コンテナからホストpcつまりmacと通信ができる。番号はサーバーが稼働している数が増えれば＋１されて数が増える
      # 今回はサーバーはx11のサーバーは１台だから0とする
      # 0.0 こちらの意味、左辺がサーバー、右辺がスクリーンを指定している。複数画面のセットアップなら増加して0.1などになる
      # 省略形もある。それが下記(現状は省略しないで書く)
       #- DISPLAY=host.docker.internal:0      
  
  # 本番環境用
  python3-prod:
    build:
      context: ./backend/pyfile
      target: production # 本番環境用
    container_name: "stady-python-prod"
    ports:
      - 8030:8030
    volumes: # ボリュームのマウント、ホストとコンテナのディレクトリをリアルタイムで同期
      - .:/src
      #- /src/backend/pyfile/venv  # venvはホストPCにマウントしない  ⚫️不要かもしれないけど一応残しておく⚫️
    tty: true
    environment:
      - ENV=production  # 本番モードの変数
    command: ["python3", "/src/backend/pyfile/prod_kidou/kidou.py"]  # 本番用のCMD

  # postgresのdb環境
  postgres:
    image: postgres:17
    container_name: "postgres-db"
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=pypost
      - POSTGRES_DB=pydb
    volumes:
      - ./data:/var/lib/postgresql/data